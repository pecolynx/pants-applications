[GLOBAL]
pants_version = "2.20.0"

backend_packages = [
    "pants.backend.python",
    "pants.backend.python.mixed_interpreter_constraints",
    "pants.backend.python.lint.bandit",
    "pants.backend.python.lint.black",
    "pants.backend.python.lint.docformatter",
    "pants.backend.docker.lint.hadolint",
    "pants.backend.python.lint.isort",
    # "pants.backend.python.lint.pylint",
    "pants.backend.python.lint.pyupgrade",
    "pants.backend.experimental.python.lint.ruff",
    "pants.backend.python.typecheck.mypy",
    "pants.backend.codegen.protobuf.python",
    "pants.backend.docker",
]

[python]
interpreter_constraints = ["CPython>=3.9,<4"]
enable_resolves = true
default_resolve = "default"

[python.resolves]
default = "3rdparty/python/default.lock"
mypy = "3rdparty/python/mypy.lock"
pytest = "3rdparty/python/pytest.lock"
grpc_client = "3rdparty/python/grpc_client.lock"
grpc_server = "3rdparty/python/grpc_server.lock"
sqs_consumer = "3rdparty/python/sqs_consumer.lock"
sqs_producer = "3rdparty/python/sqs_producer.lock"
redis_list_consumer = "3rdparty/python/redis_list_consumer.lock"
redis_list_producer = "3rdparty/python/redis_list_producer.lock"
redis_publisher = "3rdparty/python/redis_publisher.lock"
lib_logging = "3rdparty/python/lib_logging.lock"
lib_redis = "3rdparty/python/lib_redis.lock"
kinesis_consumer = "3rdparty/python/kinesis_consumer.lock"
kinesis_producer = "3rdparty/python/kinesis_producer.lock"
multiprocessing_app = "3rdparty/python/multiprocessing_app.lock"
multithreading_app = "3rdparty/python/multithreading_app.lock"
redis_client = "3rdparty/python/redis_client.lock"

[python-infer]
ambiguity_resolution = "by_source_root"

[source]
root_patterns = [
    "/src/python/*",
    "/src/protos",
]

[docker]
build_args = ["GIT_COMMIT"]

[test]
use_coverage = true

[black]
config = "build-support/pyproject.toml"

[isort]
config = ["build-support/pyproject.toml"]

[bandit]
config = "build-support/bandit.yaml"

# [pylint]
# config = "build-support/pylint.config"

[ruff]
config = "build-support/pyproject.toml"

[python-protobuf]
mypy_plugin = true

[mypy]
config = "build-support/pyproject.toml"
install_from_resolve = "mypy"
requirements = ["//3rdparty/python:mypy"]

[coverage-py]
report = [
    "xml",
    "html",
]

[pytest]
config = "build-support/pyproject.toml"
install_from_resolve = "pytest"
requirements = ["//3rdparty/python:pytest"]

# [mypy-protobuf]
# # version = "mypy-protobuf==2.10"
# config = "build-support/pyproject.toml"
# # lockfile = "build-support/mypy_protobuf_lockfile.txt"
